#include "Input/GLFWInputManager.hpp"

GLFWInputManager::GLFWInputManager(GLFWwindow* window){
    mWindow = window;
    Initialize();
}

GLFWInputManager::~GLFWInputManager(){

}

KEY_STATUS GLFWInputManager::GetKeyStatus(KEY_VALUE key){
    if (key>KEY_VALUE::K_UNKNOWN && key<KEY_VALUE::MAX_KEY_VALUES){
            return mKeyStatusMap[glfwGetKey(mWindow,mGLFWKeyMap[key])];
    }
    return KEY_STATUS::K_STATUS_UNKNOWN; 
}

void GLFWInputManager::Initialize()
{
    mGLFWKeyMap = CreateGLFWKeyMap();
    mKeyStatusMap = CreateKeyStatusMap();
}

std::unordered_map<KEY_VALUE, int> GLFWInputManager::CreateGLFWKeyMap(){
    
    std::unordered_map<KEY_VALUE, int> keyMap;
    
    keyMap[KEY_VALUE::K_UNKNOWN]=GLFW_KEY_UNKNOWN;
    keyMap[KEY_VALUE::K_SPACE]=GLFW_KEY_SPACE;
    keyMap[KEY_VALUE::K_APOSTROPHE]=GLFW_KEY_APOSTROPHE;
    keyMap[KEY_VALUE::K_COMMA]=GLFW_KEY_COMMA;
    keyMap[KEY_VALUE::K_MINUS]=GLFW_KEY_MINUS;
    keyMap[KEY_VALUE::K_PERIOD]=GLFW_KEY_PERIOD;
    keyMap[KEY_VALUE::K_SLASH]=GLFW_KEY_SLASH;
    keyMap[KEY_VALUE::K_0]=GLFW_KEY_0;
    keyMap[KEY_VALUE::K_1]=GLFW_KEY_1;
    keyMap[KEY_VALUE::K_2]=GLFW_KEY_2;
    keyMap[KEY_VALUE::K_3]=GLFW_KEY_3;
    keyMap[KEY_VALUE::K_4]=GLFW_KEY_4;
    keyMap[KEY_VALUE::K_5]=GLFW_KEY_5;
    keyMap[KEY_VALUE::K_6]=GLFW_KEY_6;
    keyMap[KEY_VALUE::K_7]=GLFW_KEY_7;
    keyMap[KEY_VALUE::K_8]=GLFW_KEY_8;
    keyMap[KEY_VALUE::K_9]=GLFW_KEY_9;
    keyMap[KEY_VALUE::K_SEMICOLON]=GLFW_KEY_SEMICOLON;
    keyMap[KEY_VALUE::K_EQUAL]=GLFW_KEY_EQUAL;
    keyMap[KEY_VALUE::K_A]=GLFW_KEY_A;
    keyMap[KEY_VALUE::K_B]=GLFW_KEY_B;
    keyMap[KEY_VALUE::K_C]=GLFW_KEY_C;
    keyMap[KEY_VALUE::K_D]=GLFW_KEY_D;
    keyMap[KEY_VALUE::K_E]=GLFW_KEY_E;
    keyMap[KEY_VALUE::K_F]=GLFW_KEY_F;
    keyMap[KEY_VALUE::K_G]=GLFW_KEY_G;
    keyMap[KEY_VALUE::K_H]=GLFW_KEY_H;
    keyMap[KEY_VALUE::K_I]=GLFW_KEY_I;
    keyMap[KEY_VALUE::K_J]=GLFW_KEY_J;
    keyMap[KEY_VALUE::K_K]=GLFW_KEY_K;
    keyMap[KEY_VALUE::K_L]=GLFW_KEY_L;
    keyMap[KEY_VALUE::K_M]=GLFW_KEY_M;
    keyMap[KEY_VALUE::K_N]=GLFW_KEY_N;
    keyMap[KEY_VALUE::K_O]=GLFW_KEY_O;
    keyMap[KEY_VALUE::K_P]=GLFW_KEY_P;
    keyMap[KEY_VALUE::K_Q]=GLFW_KEY_Q;
    keyMap[KEY_VALUE::K_R]=GLFW_KEY_R;
    keyMap[KEY_VALUE::K_S]=GLFW_KEY_S;
    keyMap[KEY_VALUE::K_T]=GLFW_KEY_T;
    keyMap[KEY_VALUE::K_U]=GLFW_KEY_U;
    keyMap[KEY_VALUE::K_V]=GLFW_KEY_V;
    keyMap[KEY_VALUE::K_W]=GLFW_KEY_W;
    keyMap[KEY_VALUE::K_X]=GLFW_KEY_X;
    keyMap[KEY_VALUE::K_Y]=GLFW_KEY_Y;
    keyMap[KEY_VALUE::K_Z]=GLFW_KEY_Z;
    keyMap[KEY_VALUE::K_LEFT_BRACKET]=GLFW_KEY_LEFT_BRACKET;
    keyMap[KEY_VALUE::K_BACKSLASH]=GLFW_KEY_BACKSLASH;
    keyMap[KEY_VALUE::K_RIGHT_BRACKET]=GLFW_KEY_RIGHT_BRACKET;
    keyMap[KEY_VALUE::K_GRAVE_ACCENT]=GLFW_KEY_GRAVE_ACCENT;
    keyMap[KEY_VALUE::K_WORLD_1]=GLFW_KEY_WORLD_1;
    keyMap[KEY_VALUE::K_WORLD_2]=GLFW_KEY_WORLD_2;
    keyMap[KEY_VALUE::K_ESCAPE]=GLFW_KEY_ESCAPE;
    keyMap[KEY_VALUE::K_ENTER]=GLFW_KEY_ENTER;
    keyMap[KEY_VALUE::K_TAB]=GLFW_KEY_TAB;
    keyMap[KEY_VALUE::K_BACKSPACE]=GLFW_KEY_BACKSPACE;
    keyMap[KEY_VALUE::K_INSERT]=GLFW_KEY_INSERT;
    keyMap[KEY_VALUE::K_DELETE]=GLFW_KEY_DELETE;
    keyMap[KEY_VALUE::K_RIGHT]=GLFW_KEY_RIGHT;
    keyMap[KEY_VALUE::K_LEFT]=GLFW_KEY_LEFT;
    keyMap[KEY_VALUE::K_DOWN]=GLFW_KEY_DOWN;
    keyMap[KEY_VALUE::K_UP]=GLFW_KEY_UP;
    keyMap[KEY_VALUE::K_PAGE_UP]=GLFW_KEY_PAGE_UP;
    keyMap[KEY_VALUE::K_PAGE_DOWN]=GLFW_KEY_PAGE_DOWN;
    keyMap[KEY_VALUE::K_HOME]=GLFW_KEY_HOME;
    keyMap[KEY_VALUE::K_END]=GLFW_KEY_END;
    keyMap[KEY_VALUE::K_CAPS_LOCK]=GLFW_KEY_CAPS_LOCK;
    keyMap[KEY_VALUE::K_SCROLL_LOCK]=GLFW_KEY_SCROLL_LOCK;
    keyMap[KEY_VALUE::K_NUM_LOCK]=GLFW_KEY_NUM_LOCK;
    keyMap[KEY_VALUE::K_PRINT_SCREEN]=GLFW_KEY_PRINT_SCREEN;
    keyMap[KEY_VALUE::K_PAUSE]=GLFW_KEY_PAUSE;
    keyMap[KEY_VALUE::K_F1]=GLFW_KEY_F1;
    keyMap[KEY_VALUE::K_F2]=GLFW_KEY_F2;
    keyMap[KEY_VALUE::K_F3]=GLFW_KEY_F3;
    keyMap[KEY_VALUE::K_F4]=GLFW_KEY_F4;
    keyMap[KEY_VALUE::K_F5]=GLFW_KEY_F5;
    keyMap[KEY_VALUE::K_F6]=GLFW_KEY_F6;
    keyMap[KEY_VALUE::K_F7]=GLFW_KEY_F7;
    keyMap[KEY_VALUE::K_F8]=GLFW_KEY_F8;
    keyMap[KEY_VALUE::K_F9]=GLFW_KEY_F9;
    keyMap[KEY_VALUE::K_F10]=GLFW_KEY_F10;
    keyMap[KEY_VALUE::K_F11]=GLFW_KEY_F11;
    keyMap[KEY_VALUE::K_F12]=GLFW_KEY_F12;
    keyMap[KEY_VALUE::K_F13]=GLFW_KEY_F13;
    keyMap[KEY_VALUE::K_F14]=GLFW_KEY_F14;
    keyMap[KEY_VALUE::K_F15]=GLFW_KEY_F15;
    keyMap[KEY_VALUE::K_F16]=GLFW_KEY_F16;
    keyMap[KEY_VALUE::K_F17]=GLFW_KEY_F17;
    keyMap[KEY_VALUE::K_F18]=GLFW_KEY_F18;
    keyMap[KEY_VALUE::K_F19]=GLFW_KEY_F19;
    keyMap[KEY_VALUE::K_F20]=GLFW_KEY_F20;
    keyMap[KEY_VALUE::K_F21]=GLFW_KEY_F21;
    keyMap[KEY_VALUE::K_F22]=GLFW_KEY_F22;
    keyMap[KEY_VALUE::K_F23]=GLFW_KEY_F23;
    keyMap[KEY_VALUE::K_F24]=GLFW_KEY_F24;
    keyMap[KEY_VALUE::K_F25]=GLFW_KEY_F25;
    keyMap[KEY_VALUE::K_KP_0]=GLFW_KEY_KP_0;
    keyMap[KEY_VALUE::K_KP_1]=GLFW_KEY_KP_1;
    keyMap[KEY_VALUE::K_KP_2]=GLFW_KEY_KP_2;
    keyMap[KEY_VALUE::K_KP_3]=GLFW_KEY_KP_3;
    keyMap[KEY_VALUE::K_KP_4]=GLFW_KEY_KP_4;
    keyMap[KEY_VALUE::K_KP_5]=GLFW_KEY_KP_5;
    keyMap[KEY_VALUE::K_KP_6]=GLFW_KEY_KP_6;
    keyMap[KEY_VALUE::K_KP_7]=GLFW_KEY_KP_7;
    keyMap[KEY_VALUE::K_KP_8]=GLFW_KEY_KP_8;
    keyMap[KEY_VALUE::K_KP_9]=GLFW_KEY_KP_9;
    keyMap[KEY_VALUE::K_KP_DECIMAL]=GLFW_KEY_KP_DECIMAL;
    keyMap[KEY_VALUE::K_KP_DIVIDE]=GLFW_KEY_KP_DIVIDE;
    keyMap[KEY_VALUE::K_KP_MULTIPLY]=GLFW_KEY_KP_MULTIPLY;
    keyMap[KEY_VALUE::K_KP_SUBTRACT]=GLFW_KEY_KP_SUBTRACT;
    keyMap[KEY_VALUE::K_KP_ADD]=GLFW_KEY_KP_ADD;
    keyMap[KEY_VALUE::K_KP_ENTER]=GLFW_KEY_KP_ENTER;
    keyMap[KEY_VALUE::K_KP_EQUAL]=GLFW_KEY_KP_EQUAL;
    keyMap[KEY_VALUE::K_LEFT_SHIFT]=GLFW_KEY_LEFT_SHIFT;
    keyMap[KEY_VALUE::K_LEFT_CONTROL]=GLFW_KEY_LEFT_CONTROL;
    keyMap[KEY_VALUE::K_LEFT_ALT]=GLFW_KEY_LEFT_ALT;
    keyMap[KEY_VALUE::K_LEFT_SUPER]=GLFW_KEY_LEFT_SUPER;
    keyMap[KEY_VALUE::K_RIGHT_SHIFT]=GLFW_KEY_RIGHT_SHIFT;
    keyMap[KEY_VALUE::K_RIGHT_CONTROL]=GLFW_KEY_RIGHT_CONTROL;
    keyMap[KEY_VALUE::K_RIGHT_ALT]=GLFW_KEY_RIGHT_ALT;
    keyMap[KEY_VALUE::K_RIGHT_SUPER]=GLFW_KEY_RIGHT_SUPER;
    keyMap[KEY_VALUE::K_MENU]=GLFW_KEY_MENU;
    keyMap[KEY_VALUE::K_LAST]=GLFW_KEY_LAST;

    return keyMap;
}

std::unordered_map<int,KEY_STATUS> GLFWInputManager::CreateKeyStatusMap(){
    std::unordered_map<int ,KEY_STATUS> keyStatusMap;
    keyStatusMap[GLFW_PRESS]=KEY_STATUS::K_PRESSED;
    keyStatusMap[GLFW_RELEASE]=KEY_STATUS::K_RELEASED;
    keyStatusMap[GLFW_REPEAT]=KEY_STATUS::K_REPEAT;
    return keyStatusMap;
}